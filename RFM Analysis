# -*- coding: utf-8 -*-
"""[Ver 2] Nguyen_Thuy_Hang_RFM_analysis_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nJwZEWznfisHolCDQ8m_nUod6R40sYRn

#**Import dataset & libraries**
"""

from google.colab import drive
drive.mount('/content/drive')

path = '/content/drive/MyDrive/da/Python/Project3_ThuyHang_Python/ecommerce_retail.xlxs'

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import warnings
warnings.filterwarnings('ignore')

xls = pd.ExcelFile('/content/drive/MyDrive/da/Python/Project3_ThuyHang_Python/ecommerce_retail.xlsx')

ecommerce_retail = xls.parse(sheet_name='ecommerce retail')
segmentation = xls.parse(sheet_name='Segmentation')

!pip install ydata-profiling

from ydata_profiling import ProfileReport

"""#**CONTEXT & PROBLEM**
 **1. Context**

SuperStore is a global retail company with a large customer base. As the Christmas and New Year holidays approach, the Marketing department plans to launch customer appreciation and loyalty campaigns. Given the scale of the data, traditional manual segmentation is no longer feasible.

 **2. Problem Understanding**

 The company needs to segment customers to run targeted marketing campaigns, but the growing volume of customer data makes manual methods like Excel ineffective. To address this,  Marketing Director suggests using the RFM (Recency, Frequency, Monetary) model and Marketing department requests the Data Analytics department to build an automated RFM analysis pipeline using Python. This will enable scalable, accurate customer segmentation to support personalized marketing efforts.

-> *Analyze the current situation of the company and give suggestions to the Marketing team*

-> *Suggestions to the Marketing and Sales teams with the retail model of the Superstore company, which of the 3 indicators R, F, M should be most concerned about?*

# **EDA**

##**Initial look**
"""

#size
ecommerce_retail.shape

#info
ecommerce_retail.info()

#10firstline
ecommerce_retail.head(10)

#descriptive statistics
ecommerce_retail.describe()

"""##**Inspection & Validation**"""

#Overview 1 initial
profile = ProfileReport(ecommerce_retail, title="EDA Report", explorative=True)
profile.to_notebook_iframe()

"""###Data type
1.Đổi dtype của InvoiceID & StockCode &CustomerID sang STRING vì thường InvoiceID bao gồm số+chữ

2.Description, Country -> diễn giải / tên quốc gia -> đổi dtyppe của 2 cột này sang STRING


"""

#dtype
ecommerce_retail.dtypes

# change dtype
ecommerce_retail['InvoiceNo'] = ecommerce_retail['InvoiceNo'].astype('string')
ecommerce_retail['StockCode'] = ecommerce_retail['StockCode'].astype('string')
ecommerce_retail['Description'] = ecommerce_retail['Description'].astype('string')
ecommerce_retail['CustomerID'] = ecommerce_retail['CustomerID'].astype('string')
ecommerce_retail['Country'] = ecommerce_retail['Country'].astype('string')

#check again dtype
ecommerce_retail.dtypes

"""###Missing Value
Description, CustomerID
-> Next step:

1. Loại bỏ các dòng ko có thông tin về Description vì Unit Price = 0 và không có thông tin về Customer ID

2. Loại bỏ các dòng không có thông tin về CustomerID vì sẽ ko xác định đc danh tính để phân khúc khách hàng

"""

#Thống kê những cột có Missing Value
ecommerce_retail.isnull().sum()

# check lý do CustomerID bị null nhiều như vậy
print(ecommerce_retail[ecommerce_retail.CustomerID.isnull()].head())

print('')

print(ecommerce_retail[ecommerce_retail.CustomerID.isnull()].tail())

ecommerce_retail['Day'] =  pd.to_datetime(ecommerce_retail['InvoiceDate']).dt.date
ecommerce_retail['Month'] = ecommerce_retail['Day'].apply(lambda x: str(x)[:-3])

df_group_day = ecommerce_retail[ecommerce_retail.CustomerID.isnull()][['Month','InvoiceNo']].groupby(['Month']).count().reset_index().sort_values(by = ['Month'], ascending = True)
df_group_day.head(50)

#Loại bỏ dòng ko có Description
ecommerce_retail = ecommerce_retail[ecommerce_retail['Description'].notna()]

##Loại bỏ dòng ko có CustomerID
ecommerce_retail = ecommerce_retail[ecommerce_retail['CustomerID'].notna()]

#check
ecommerce_retail.isnull().sum()

"""###Unique Value"""

ecommerce_retail.nunique()

ecommerce_retail["InvoiceNo"].value_counts()

ecommerce_retail["StockCode"].value_counts()

ecommerce_retail["CustomerID"].value_counts()

ecommerce_retail["Country"].value_counts()

"""###Duplicate Value
Duplicates: 5225 rows -> Next step: Delete rows
"""

ecommerce_retail.duplicated().sum()

ecommerce_retail = ecommerce_retail.drop_duplicates()

#Check lại
ecommerce_retail.duplicated().sum()

"""###Outliers
Next step: no action vì có KH mua số lượng ít, có KH mua số lượng nhiều
"""

Q1 = ecommerce_retail['Quantity'].quantile(0.25)
Q3 = ecommerce_retail['Quantity'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

ecom_outliers = ecommerce_retail[(ecommerce_retail['Quantity'] < lower_bound) | (ecommerce_retail['Quantity'] > upper_bound)]
print(ecom_outliers)

"""###Valid Value
- Những dòng có Quantity < 0 -> loại bỏ vì đây là trả hàng
- Những dòng có Unit Price < 0 -> loại bỏ

####Detect & Handle - Quantity Value < 0
"""

#check lý do data Quantity < 0
print('Print một số giá trị có Quantity < 0')
print(ecommerce_retail[ecommerce_retail.Quantity < 0].head())
print('')

#check lý do cột Quantity < 0 có phải do giao dịch bị cancel hay không?
print('Check lý do cột Quantity < 0 có phải do giao dịch bị cancel hay không')
ecommerce_retail['InvoiceNo'] = ecommerce_retail['InvoiceNo'].astype(str)
ecommerce_retail['check_cancel'] = ecommerce_retail['InvoiceNo'].apply(lambda x: True if x[0] == 'C' else False)
print(ecommerce_retail[(ecommerce_retail.Quantity < 0) & (ecommerce_retail.check_cancel == True)].head())

print('')
ecommerce_retail[(ecommerce_retail.Quantity < 0) & (ecommerce_retail.check_cancel == False)].head()

#drop data có Quantity < 0
ecommerce_retail = ecommerce_retail[ecommerce_retail['Quantity'] > 0]

#drop data có đơn bị cancel
ecommerce_retail = ecommerce_retail[ecommerce_retail.check_cancel == False]
ecommerce_retail = ecommerce_retail.replace('nan', None)
ecommerce_retail = ecommerce_retail.replace('Nan',None)

"""####Detect & Handle - Unit Price Value < 0"""

#check Unit Price < 0
print('Print một số giá trị có UnitPrice < 0')
ecommerce_retail[ecommerce_retail.UnitPrice < 0].head()

#drop data có Unit Price < 0
ecommerce_retail = ecommerce_retail[ecommerce_retail['UnitPrice'] > 0]

"""###Distribution"""

df_pos_qty = ecommerce_retail[ecommerce_retail['Quantity'] > 0]
plt.hist(np.log1p(df_pos_qty['Quantity']), bins=50)
plt.title("Log Distribution of Quantity")
plt.show()

# Tạo biến TotalPrice
ecommerce_retail['TotalPrice'] = ecommerce_retail['Quantity'] * ecommerce_retail['UnitPrice']

# Giữ lại các dòng có TotalPrice > 0 để tránh lỗi log
df_positive_total = ecommerce_retail[ecommerce_retail['TotalPrice'] > 0]

# Vẽ histogram của log(1 + TotalPrice)
plt.figure(figsize=(10, 6))
plt.hist(np.log1p(df_positive_total['TotalPrice']), bins=50, color='lightgreen', edgecolor='black')

plt.title('Log-Scaled Distribution of Total Transaction Value')
plt.xlabel('log(1 + TotalPrice)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

#Overview last time
profile = ProfileReport(ecommerce_retail, title="EDA Report", explorative=True)
profile.to_notebook_iframe()

"""#**Data Processing**

###Prepare
"""

#Add TotalPrice Column
ecommerce_retail['TotalPrice'] = ecommerce_retail['Quantity'] * ecommerce_retail['UnitPrice']

#gán ngày tham chiếu
import datetime as dt
ref_date = dt.datetime(2011, 12, 31)

"""###Calculation R,F,M mark"""

rfm = ecommerce_retail.groupby('CustomerID').agg({
    'InvoiceDate': lambda x: (ref_date - x.max()).days,   # Recency
    'InvoiceNo': 'nunique',                               # Frequency
    'TotalPrice': 'sum'                                   # Monetary
}).reset_index()

rfm.columns = ['CustomerID', 'Recency', 'Frequency', 'Monetary']

"""###Tính điểm R, F, M với qcut() & điểm RFM"""

# Recency: điểm thấp -> khách hàng mới (càng mới càng tốt)
rfm['R_score'] = pd.qcut(rfm['Recency'], 5, labels=[5, 4, 3, 2, 1])

# Frequency & Monetary: điểm cao là khách tốt
f_bins = pd.qcut(rfm['Frequency'], q=5, duplicates='drop')
rfm['F_score'] = f_bins.cat.codes + 1  # mã hóa nhãn thành 1, 2, ...

m_bins = pd.qcut(rfm['Monetary'], q=5, duplicates='drop')
rfm['M_score'] = m_bins.cat.codes + 1

rfm['RFM Score'] = rfm['R_score'].astype(str) + rfm['F_score'].astype(str) + rfm['M_score'].astype(str)
rfm.head()

"""###Phân nhóm khách hàng theo điểm RFM"""

#Tách chuỗi RFM Score thành list, rồi explode thành từng dòng
segmentation['RFM Score'] = segmentation['RFM Score'].str.split(',')  # Tách chuỗi thành list
segmentation = segmentation.explode('RFM Score').reset_index(drop=True)  # Chuyển mỗi RFM Score thành một dòng

segmentation

rfm

# Đổi tên cột để tránh lỗi
rfm.rename(columns={'RFM Score': 'RFM_Score'}, inplace=True)
segmentation.rename(columns={'RFM Score': 'RFM_Score'}, inplace=True)

# Đảm bảo cột RFM_Score đều là số nguyên
rfm['RFM_Score'] = rfm['RFM_Score'].astype(int)
segmentation['RFM_Score'] = segmentation['RFM_Score'].astype(int)

# Merge segmentation với bảng rfm theo cột 'RFM_Score'
rfm_segmented = rfm.merge(segmentation, on='RFM_Score', how='left')

rfm_segmented

rfm_segmented['Segment'].value_counts()

"""###Phân nhóm khách hàng theo tính chất từ RFM segment"""

def map_to_group(segment):
    if segment in ['Champions', 'Loyal']:
        return 'Loyal Core'
    elif segment in ['Need Attention','At Risk', 'Cannot Lose Them']:
        return 'Save-Worthy'
    elif segment in ['Potential Loyalist', 'Promising', 'New Customers']:
        return 'Growth Potential'
    elif segment in ['Hibernating customers', 'About To Sleep']:
        return 'Inactive'
    elif segment in ['Lost customers']:
        return 'Lost'
    else:
        return 'Other'  # optional: for unexpected values

# Áp dụng với lambda
rfm_segmented['Customer_Group'] = rfm_segmented['Segment'].apply(lambda x: map_to_group(x))

rfm_segmented.head(20)

"""#**Data Visualization & Analysis**

###Sự phân bố Recency, Frequency, Monetary
→ Hiểu tổng quan về hành vi khách hàng theo từng chiều: gần đây, thường xuyên, chi tiêu

####Distribution (remove outliers)
"""

fig, axs = plt.subplots(1, 3, figsize=(20, 5))

# Recency
sns.histplot(data=rfm_segmented, x='Recency', bins=30, kde=True, ax=axs[0], color='skyblue')
axs[0].set_title('Recency Distribution')

# Frequency (lọc <= 50 để bỏ outlier -- Một số khách mua hàng trăm lần khiến phân phối bị lệch, khó quan sát số đông)
sns.histplot(data=rfm_segmented[rfm_segmented['Frequency'] <= 50],
             x='Frequency', bins=30, kde=True, ax=axs[1], color='salmon')
axs[1].set_title('Frequency Distribution (<=50)')

# Monetary (lọc <= 10000 để nhìn rõ tập trung chính -- Có một số khách hàng chi tiêu cực lớn gây méo phân bố – cần tách ra để phân tích riêng)
sns.histplot(data=rfm_segmented[rfm_segmented['Monetary'] <= 10000],
             x='Monetary', bins=30, kde=True, ax=axs[2], color='seagreen')
axs[2].set_title('Monetary Distribution (<=10k)')

plt.tight_layout()
plt.show()

"""####Outliers cho nhóm chi tiêu cao"""

monetary_outliers = rfm_segmented[rfm_segmented['Monetary'] > 10000]
monetary_outliers.shape  # Xem có bao nhiêu khách

monetary_outliers.describe()

sns.histplot(data=monetary_outliers, x='Monetary', bins=30, kde=True, color='purple')
plt.title("Distribution of High Monetary Outliers (>10,000)")
plt.show()

# So sánh trung bình RFM của outlier vs toàn bộ
compare_df = pd.DataFrame({
    'All_Customers': rfm_segmented[['Recency', 'Frequency', 'Monetary']].mean(),
    'Outliers_Only': monetary_outliers[['Recency', 'Frequency', 'Monetary']].mean()
}).round(1)

compare_df

monetary_outliers['Segment'].value_counts()

"""####***Assessment (step 1)***
1. **Recency Distribution**
- Phân bố lệch phải mạnh: Rất nhiều khách hàng có Recency thấp (tức là mới mua gần đây), tập trung ở khoảng 30–60 ngày gần nhất.
- Số ít khách có Recency rất cao (200–400 ngày): Đây là những khách lâu rồi chưa quay lại, có nguy cơ rời bỏ cao.

→ *Insight:*
+ Phần lớn khách hàng vẫn còn tương tác tương đối gần đây, đây là tín hiệu tích cực.
+ Cần cân nhắc các chiến dịch giữ chân nhóm khách Recency > 150 (ít mua lại)

2. **Frequency Distribution**
- Đã lọc khách có Frequency > 50 để tập trung vào nhóm đông đảo.
- Phân bố lệch phải rất rõ: Đa số khách chỉ mua 1–3 lần, cực ít người mua >10 lần.

→ *Insight:*
+ Tập khách hàng chủ yếu là người mua thử hoặc mua một lần.
+ Tiềm năng để tăng Frequency bằng các chương trình loyalty, up-sell, reminder.

3. **Monetary Distribution**
- Lọc khách có Monetary > 10,000 để nhìn rõ phần đông.
- Lệch phải rõ rệt: Hầu hết khách chi tiêu dưới 2000 đơn vị tiền (rất nhiều trong khoảng 0–1000).
- Có một số outlier chi tiêu rất lớn (phần bị cắt), cần phân tích riêng (*)

→ *Insight:*
+ Khách hàng có giá trị thấp chiếm phần lớn -> dễ scale nhưng cũng dễ rời bỏ.
+ Nhóm chi tiêu cao (đã lọc ra) có thể là VIP / Big Spender, cần chiến lược riêng để giữ chân.

4. **Nhóm KH có chi tiêu lớn (>10000)**
- Nhóm outlier mua thường xuyên hơn (30.6 so với 4.3), gần đây hơn (39.5 so với 113) và chi tiêu cao gấp ~17 lần trung bình toàn bộ
- Nhóm KH này chủ yếu là Champions, chiếm ưu thế tuyệt đối: 85/104 khách (≈ 82%), Các nhóm còn lại chỉ chiếm tỉ lệ rất nhỏ.

*→ Insight:*
- Nhóm khách chi tiêu vượt trội có hành vi rất tích cực:
Mua nhiều, mua thường xuyên, quay lại gần đây → rất trung thành và có giá trị cao.
- Hầu hết nằm trong phân khúc “Champions”:
Đây là nhóm cực kỳ quan trọng, cần được nhận diện và chăm sóc đặc biệt (ưu đãi độc quyền, ưu tiên hỗ trợ, chiến dịch giữ chân...).
- Tác động mạnh đến kết quả phân tích chung:
Nếu không tách riêng, nhóm outlier có thể làm lệch trung bình toàn bộ và che mờ xu hướng của đa số khách hàng còn lại.


**CONCLUSION**

*Tình trạng của SuperStore*
- Tập khách hàng khá tích cực (Recency tốt)
- Tỷ lệ mua lặp lại còn thấp, phần lớn mới chỉ mua 1-2 lần → cần kích thích F tăng
- Nhóm khách chi tiêu lớn rất tiềm năng, nên tách riêng để chăm sóc và khai thác giá trị dài hạn


*Suggestion*
- Retargeting nhóm có Recency cao nhưng Frequency thấp để thúc đẩy mua lại
- Xây chương trình “VIP/Elite” riêng cho nhóm chi tiêu lớn để giữ chân và upsell hiệu quả
- Phân nhóm khách hàng để làm cá nhân hóa chiến dịch marketing từ bước sau

###Cơ cấu phân khúc khách hàng

→ Xác định nhóm nào đang chiếm ưu thế trong dữ liệu.

####Tổng hợp số lượng & doanh thu theo phân khúc
"""

# Tổng hợp theo Segment
segment_summary = rfm_segmented.groupby('Segment').agg({
    'CustomerID': 'count',       # đổi lại nếu ID tên khác
    'Monetary': 'sum'
}).rename(columns={'CustomerID': 'Num_Customers', 'Monetary': 'Total_Revenue'})

# Tính thêm phần trăm
segment_summary['%_Customers'] = (segment_summary['Num_Customers'] / segment_summary['Num_Customers'].sum() * 100).round(2)
segment_summary['%_Revenue'] = (segment_summary['Total_Revenue'] / segment_summary['Total_Revenue'].sum() * 100).round(2)

# Sắp xếp theo doanh thu
segment_summary.sort_values(by='Total_Revenue', ascending=False)

"""####Cơ cấu phân khúc"""

#Số lượng khách hàng mỗi phân khúc
plt.figure(figsize=(9,5))
sns.countplot(data=rfm_segmented, x='Segment', order=rfm_segmented['Segment'].value_counts().index)
plt.xticks(rotation=45)
plt.title('Số lượng khách hàng theo từng phân khúc (Segment)')
plt.xlabel('Segment')
plt.ylabel('Số lượng khách hàng')
plt.tight_layout()
plt.show()

#Tổng doanh thu theo phân khúc
monetary_by_segment = rfm_segmented.groupby('Segment')['Monetary'].sum().sort_values(ascending=False)

# Vẽ bar chart
plt.figure(figsize=(9,5))
sns.barplot(x=monetary_by_segment.index, y=monetary_by_segment.values)
plt.xticks(rotation=45)
plt.ylabel('Tổng chi tiêu (Monetary)')
plt.title('Tổng chi tiêu theo từng phân khúc khách hàng')
plt.tight_layout()
plt.show()

"""####***Assessment (step 2)***
**1. Nhóm cốt lõi (Champions & Loyal)**
- Champions chiếm khoảng 12.31% khách hàng nhưng tạo ra tới 54.88% doanh thu, là nhóm khách hàng chiến lược cần được ưu tiên duy trì và phát triển
- Loyal chiếm 5.44% nhưng đóng góp 9.96% doanh thu, thể hiện tiềm năng chuyển đổi thành Champions nếu được chăm sóc đúng cách.

→ *Rủi ro*: Mất nhóm Champions sẽ làm doanh thu giảm mạnh, đồng thời nếu không nâng cấp được Loyal, nguồn khách trung thành sẽ bị thu hẹp

→ *Khuyến nghị*:
- Tập trung tri ân, ưu đãi VIP, xây dựng cộng đồng trung thành cho Champions
- Tăng cường chương trình khuyến khích giới thiệu bạn bè, tặng thưởng nâng hạng cho nhóm Loyal nhằm phát triển họ thành Champions

**2. Nhóm tiềm năng (Promising, Potential Loyalist, New Customers)**

Nhóm này chiếm tỷ trọng lớn về số lượng khách hàng mới nhưng doanh thu hiện thấp (New Customers chiếm 11.75% khách hàng nhưng chỉ đóng góp 1.35% doanh thu). Đây là nhóm khách hàng cần được nuôi dưỡng bài bản để chuyển đổi thành khách hàng trung thành.

→ *Cơ hội*: Nếu có quy trình onboarding hiệu quả, chính sách ưu đãi và chăm sóc cá nhân hóa, nhóm này có thể phát triển thành Loyal hoặc thậm chí Champions trong tương lai

→ *Khuyến nghị*: Xây dựng hệ thống chăm sóc khách hàng mới qua email định kỳ, hướng dẫn sử dụng sản phẩm, cung cấp ưu đãi mua lại, và tạo trải nghiệm khách hàng cá nhân hóa để tăng khả năng giữ chân.

**3. Nhóm có dấu hiệu rời bỏ (Need Attention, At Risk, About To Sleep, Hibernating)**

Nhóm này đang mất dần tương tác và có nguy cơ cao rời bỏ, tuy nhiên vẫn đóng góp phần đáng kể vào doanh thu (ví dụ nhóm At Risk chiếm 5.53% khách hàng nhưng đóng góp 6.46% doanh thu)

→ *Rủi ro*: Không kịp thời giữ chân sẽ mất khách hàng có giá trị, ảnh hưởng tới sự ổn định doanh thu

→ *Khuyến nghị*: Áp dụng chiến dịch tái kích hoạt cá nhân hóa, ưu đãi giới hạn thời gian, nhắc lại lý do khách hàng từng lựa chọn sản phẩm để kích thích mua lại và duy trì tương tác.

**4. Nhóm nguy hiểm cao (Cannot Lose Them)**

Mặc dù chỉ chiếm 5.25% khách hàng, nhóm này đóng góp 3.99% doanh thu nhưng đang có dấu hiệu mất khách VIP

→ *Rủi ro*: Mất nhóm VIP này gây tổn thất lớn về doanh thu và uy tín thương hiệu

→ *Khuyến nghị*: Thực hiện chăm sóc đặc biệt bằng cách liên hệ trực tiếp, khảo sát nguyên nhân giảm mua, tặng voucher độc quyền, tạo ưu đãi cá nhân hóa nhằm giữ chân khách hàng

**5. Nhóm mất giá trị (Lost Customers)**
Chiếm tỷ lệ đông nhất (14.29%) nhưng đóng góp doanh thu rất thấp (1.61%)

→ *Rủi ro*: Tiếp tục đầu tư marketing đại trà vào nhóm này dễ gây lãng phí nguồn lực, ROI thấp

→ *Khuyến nghị*: Tối ưu hóa ngân sách bằng cách giảm chi tiêu quảng cáo cho nhóm này, chỉ áp dụng remarketing chọn lọc qua các chương trình thử nghiệm ưu đãi quay lại (A/B test), hoặc loại khỏi danh sách tiếp thị nếu không hiệu quả

**Tổng kết**: SuperStore đang phụ thuộc nhiều vào nhóm nhỏ Champions tạo doanh thu chủ đạo, cần duy trì và phát triển nhóm Loyal để đảm bảo nguồn khách trung thành ổn định. Song song đó, phải chú trọng nuôi dưỡng nhóm khách tiềm năng mới và tái kích hoạt nhóm có dấu hiệu rời bỏ để duy trì tăng trưởng bền vững. Đồng thời, cần tránh lãng phí nguồn lực vào nhóm mất giá trị.

###Phân tích Giá trị nhóm
→ Hiểu rõ từng phân khúc khách hàng theo giá trị mang lại

####Tổng hợp giá trị nhóm theo Segment
"""

segment_value = rfm_segmented.groupby('Segment').agg(
    Num_Customers=('CustomerID', 'count'),
    Total_Revenue=('Monetary', 'sum'),
    Avg_Revenue=('Monetary', 'mean'),
    Avg_Frequency=('Frequency', 'mean'),
    Avg_Recency=('Recency', 'mean')
).round(2).sort_values(by='Total_Revenue', ascending=False)

segment_value

"""####So sánh giá trị nhóm"""

#Biểu đồ cột so sánh Avg_Revenue theo từng phân khúc

plt.figure(figsize=(9, 5))
sns.barplot(data=segment_value.reset_index(),
            x='Segment', y='Avg_Revenue')
plt.title('Doanh thu trung bình mỗi khách hàng theo phân khúc')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Recency trung bình (Avg_Recency)
plt.figure(figsize=(9, 5))
sns.barplot(data=segment_value.reset_index(),
            x='Segment', y='Avg_Recency')
plt.title('Recency trung bình mỗi phân khúc khách hàng')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Tần suất mua trung bình (Avg_Frequency)
plt.figure(figsize=(9, 5))
sns.barplot(data=segment_value.reset_index(),
            x='Segment', y='Avg_Frequency')
plt.title('Tần suất mua trung bình mỗi khách hàng (Avg Frequency)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""####***Assessment step 3***
**1. Nhóm khách hàng cốt lõi (Champions & Loyal)**

- Champions: 534 khách (~12%), doanh thu 4.8 triệu (>50%), chi tiêu trung bình 9,134/người, tần suất mua 15.86 lần.  
- Loyal: 5.44% KH, chi tiêu trung bình 3,749/người, tần suất mua 7.37 lần.  

-> **Insight:** Đây là nhóm tạo ra doanh thu lớn nhất, có sự gắn bó cao với thương hiệu

->  **Rủi ro:** Phụ thuộc quá nhiều vào nhóm này có thể khiến doanh thu biến động mạnh nếu họ giảm tương tác hoặc rời bỏ


->**Recommendation:** Ưu tiên các chương trình tri ân, ưu đãi VIP, tích điểm thưởng, chăm sóc khách hàng riêng biệt và cho phép truy cập sớm sản phẩm mới để tăng tính gắn kết và giữ chân lâu dài



**2. Nhóm khách hàng có giá trị cao nhưng có nguy cơ rời bỏ (At Risk & Cannot Lose Them)**

- At Risk: 5.53% KH, chi tiêu 2,391/người, tần suất mua 4.96 lần.
- Cannot Lose Them: 5.25% KH, doanh thu chiếm 3.99%, Recency cao (235 ngày).

-> **Insight:** Doanh thu nhóm này vẫn cao nhưng có dấu hiệu giảm tương tác, nguy cơ mất khách giá trị lớn



-> **Rủi ro:** Mất đi nhóm này gây tổn thất đáng kể về doanh thu và ảnh hưởng uy tín thương hiệu



->  **Recommendation:** Triển khai ưu đãi cá nhân hóa, voucher độc quyền, nhắn tin cảm ơn, xây dựng các hoạt động gắn kết đặc biệt để kích thích tương tác và giữ chân khách hàng


**3. Nhóm khách hàng tiềm năng (Potential Loyalist, Promising & New Customers)**
- Tổng số khách Potential Loyalist, Promising là trên 700, New Customers 510 KH
- Chi tiêu trung bình của nhóm Promising là 1437.1/người, Potential List là 699.00/người, New Customers là 235.8/người
- Recency còn tốt nhưng tần suất thấp.


 -> **Insight:** Khách hàng mới và tiềm năng đang cần được nuôi dưỡng để phát triển thành khách trung thành

 -> **Cơ hội:** Tăng doanh thu dài hạn bằng việc nuôi dưỡng và chuyển đổi nhóm này thành khách hàng thân thiết

 -> **Recommendation:** Xây dựng quy trình onboarding bài bản, cá nhân hóa email marketing, ưu đãi mua lại, khuyến khích giới thiệu bạn bè và upsell các sản phẩm liên quan



**4. Nhóm khách hàng đang "ngủ đông" (Hibernating & About To Sleep)**
- Need Attention: Chi tiêu trung bình khá ổn: 1734.93/người, có dấu hiệu giảm tương tác (Recency là 45.59 days)  và tần suất mua giảm (Frequency là 4.64 lần)
- Hibernating: 491 KH, chi tiêu trung bình thấp (346.20/người), Recency cao, Frequency thấp
- About To Sleep: 328 KH, chi tiêu trung bình khá thấp (492.76/người), cũng có xu hướng giảm hoạt động, Recency cao, Frequency thấp

->  **Insight:** Nhóm có nguy cơ mất đi nếu không kích hoạt lại sớm.

-> **Rủi ro:** Mất nhóm này sẽ ảnh hưởng đến doanh thu trong dài hạn

-> **Recommendation:** Áp dụng flash sale, nhắc nhở giỏ hàng bỏ quên, khảo sát nhu cầu cá nhân hóa để tái kích hoạt và kéo khách trở lại


**5. Nhóm khách hàng mất giá trị (Lost Customers)**
- 620 KH, Recency cao nhất (296 ngày), chi tiêu thấp 0.14 triệu, chi tiêu trung bình rất thấp: 231.26/người.

-> **Insight:** Gần như không còn giá trị cho doanh thu hiện tại.

->  **Rủi ro:** Tiếp tục đầu tư đại trà dễ gây lãng phí ngân sách.

-> **Recommendation:** Giảm ngân sách đại trà, remarketing chọn lọc với A/B test, loại khỏi tệp nếu ROI âm.

###Mối quan hệ giữa các chỉ số
→ Xác định đặc điểm hành vi tiêu dùng của khách hàng theo từng chiều.
1. R&F -> Khách mua nhiều và gần đây không?
2. R&M -> Khách chi tiêu cao nhưng mua lâu chưa quay lại không?
3. F&M -> Khách mua nhiều có chi nhiều tiền không? (tránh khách nhỏ lẻ mua nhiều nhưng giá trị thấp)
4. Hiểu xem giữa các chỉ số Recency (R), Frequency (F), Monetary (M) có mối quan hệ như thế nào.

Phát hiện nhóm khách hàng tiềm năng hoặc bất thường.
Từ đó, xác định rõ đặc điểm của từng nhóm, và gợi ý chiến lược phù hợp.
"""

#Correlation
rfm_corr = rfm_segmented[['Recency', 'Frequency', 'Monetary']].corr()

plt.figure(figsize=(5, 4))
sns.heatmap(rfm_corr, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix giữa Recency, Frequency, Monetary')
plt.show()

# Ép kiểu về string để xử lý phân loại rõ ràng trong heatmap
rfm_segmented['R_score'] = rfm_segmented['R_score'].astype(str)
rfm_segmented['F_score'] = rfm_segmented['F_score'].astype(str)
rfm_segmented['M_score'] = rfm_segmented['M_score'].astype(str)

plt.figure(figsize=(18, 5))

# Heatmap 1: R vs F
plt.subplot(1, 3, 1)
rf_matrix = rfm_segmented.groupby(['R_score', 'F_score'])['CustomerID'].count().unstack().fillna(0)
rf_matrix = rf_matrix.astype(float)
sns.heatmap(rf_matrix, annot=True, fmt='g', cmap='YlGnBu')
plt.title('R_score vs F_score')
plt.xlabel('F_score')
plt.ylabel('R_score')

# Heatmap 2: R vs M
plt.subplot(1, 3, 2)
rm_matrix = rfm_segmented.groupby(['R_score', 'M_score'])['CustomerID'].count().unstack().fillna(0)
rm_matrix = rm_matrix.astype(float)
sns.heatmap(rm_matrix, annot=True, fmt='g', cmap='Oranges')
plt.title('R_score vs M_score')
plt.xlabel('M_score')
plt.ylabel('R_score')

# Heatmap 3: F vs M
plt.subplot(1, 3, 3)
fm_matrix = rfm_segmented.groupby(['F_score', 'M_score'])['CustomerID'].count().unstack().fillna(0)
fm_matrix = fm_matrix.astype(float)
sns.heatmap(fm_matrix, annot=True, fmt='g', cmap='PuBuGn')
plt.title('F_score vs M_score')
plt.xlabel('M_score')
plt.ylabel('F_score')

plt.tight_layout()
plt.show()

"""####***Assessment step 4***

**1. Nhóm khách cao cấp đang hình thành (R=5, F=3–4, M=4–5)**

- ~565 khách có Recency cao (mua gần đây), Frequency ≥ 3, Monetary ≥ 4 → tệp khách trung thành & chi tiêu lớn
- Đây là **lõi khách hàng mới** rất tiềm năng để phát triển thành Champions.

-> *Cơ hội:* Có thể trở thành nhóm tạo doanh thu chính trong tương lai nếu được nuôi dưỡng tốt

-> *Recommendation:* Tạo ưu đãi VIP sớm, CSKH riêng, trải nghiệm sản phẩm trước, chương trình tích điểm theo cấp bậc.

**2. Khách từng chi nhiều nhưng có nguy cơ rời bỏ (R=1, M=4–5)**

- Nhóm khách có giá trị đơn hàng lớn nhưng đã lâu không quay lại
- Recency thấp nhất, chi tiêu từng rất cao (Monetary = 4–5)

-> *Rủi ro:* Mất nhóm này là mất nguồn thu lớn.

-> *Recommendation:* Gửi email tái kích hoạt, tặng voucher “welcome back”, ưu đãi chỉ dành riêng (flash sale cá nhân hóa)

**3. Khách mua nhiều lần nhưng giá trị đơn thấp (F=4, M=1–2)**

- Tần suất cao (4 lần), nhưng giá trị chi tiêu chỉ ở mức thấp → nhóm “thường mua nhưng không mạnh tay”
- Đây là **nhóm nhỏ lẻ trung thành**, chưa khai thác hết tiềm năng.

-> *Cơ hội:* Có thể tăng ARPU bằng upsell.

-> *Recommendation:* Gợi ý combo sản phẩm, giảm giá theo bậc chi tiêu, nâng cấp trải nghiệm thanh toán (free ship nếu đạt ngưỡng).

**4. Tệp khách vừa quay lại nhưng chưa có giá trị cao (R=5, F=1, M=1)**

- Mới mua lại gần đây (R=5) nhưng vẫn mua ít & nhỏ → khách tiềm năng chuyển đổi

-> *Cơ hội:* Biến thành khách trung thành nếu được chăm đúng lúc

-> *Recommendation:* Triển khai offer “lần mua thứ hai”, onboarding trải nghiệm sản phẩm tốt hơn, upsell nhẹ nhàng.

#**Conclusion -> Insights & Recommendations**

###Kết luận về hiện trạng SuperStore & Gợi ý cho team Marketing

#####**Hiện trạng SuperStore**
(1) Phụ thuộc lớn vào nhóm khách hàng trung thành (Champions)
- Chỉ chiếm ~12% số lượng khách nhưng tạo ra >50% doanh thu.
- Nếu không duy trì nhóm này, doanh thu dễ suy giảm nghiêm trọng

(2) Tỷ lệ mua lặp lại thấp, khách mua một lần vẫn rất đông
- Phần lớn khách chỉ mua 1–2 lần, chi tiêu nhỏ (F=1, M=1 vẫn chiếm đa số) nên cần các chiến dịch tăng Frequency và ARPU (Average Revenue per user)

(3) Tồn tại nhóm VIP từng chi tiêu lớn nhưng đang rời bỏ
- Nhóm R=1, M=4–5 có giá trị đơn hàng cao nhưng đã lâu không quay lại.
→ Nguy cơ mất nguồn thu lớn nếu không có chiến dịch tái kích hoạt sớm.

(4) Tệp khách tiềm năng còn chưa được chuyển đổi hiệu quả
- Promising, Potential Loyalist, New Customer: Recency tốt nhưng Frequency và chi tiêu còn thấp → cơ hội để nurturing.

(5) Có nhiều khách “ngủ đông” hoặc đã mất giá trị
Hibernating, About To Sleep Lost Customers chiếm > 30% KH nhưng đóng góp doanh thu thấp -> Không nên tiếp thị đại trà vào nhóm này nếu không có chỉ số ROI khả quan

#####**Gợi ý cho Team Marketing**
(1) Chiến lược chăm sóc khách hàng hiện tại (Retention)
- Ưu tiên nhóm Champions & Loyal: Ưu đãi VIP, tích điểm thưởng, ưu tiên hỗ trợ, early-access sản phẩm
- Nhóm At Risk & Cannot Lose Them: Re-engagement campaigns, khảo sát lý do rời xa, offer cá nhân hóa

(2) Chiến lược nuôi dưỡng khách tiềm năng/mới (Nurturing)
- Promising, Potential Loyalist, New Customer: Kịch bản remarketing, ưu đãi mua lặp lại, email onboarding, cá nhân hóa thông điệp

(3) Chiến lược kích hoạt lại (Reactivation)
- Hibernating, About to Sleep, Need Attention: Flash sale giới hạn, thông điệp cảm xúc ("Bạn đang nhớ sản phẩm này?"), ưu đãi chỉ dành riêng.

(4) Chiến lược tối ưu nguồn lực
- Lost Customers: Dừng marketing đại trà, chỉ thử comeback A/B testing → nếu ROI thấp thì loại khỏi tệp.

###Gợi ý với team Marketing và Sales với mô hình bán lẻ của công ty Superstore thì nên quan tâm nhất vào chỉ số nào trong 3 chỉ số R, F, M?
-> mỗi team nên ưu tiên từng chỉ số RFM

#####**Team Marketing**
-> Nên ưu tiên **Recency (R)** vì:

(1) Mục tiêu cốt lõi của Team Marketing
- Giữ chân khách hàng (retention)
- Tăng tỉ lệ chuyển đổi (conversion rate) từ chiến dịch quảng cáo/email/SMS.
- Tối ưu chi phí/hiệu quả marketing (CPL, ROAS, CTR, open rate).
- Nuôi dưỡng lại nhóm khách chưa quay lại (winback/lapsed segment).
-> Tất cả các mục tiêu trên đều phụ thuộc mạnh vào việc biết khách còn “nóng” hay đã “nguội” → Đó là Recency

(2) Tại sao Recency là chỉ số quan trọng nhất?
- Recency phản ánh độ “nóng” của khách hàng: Nếu khách vừa mua → tâm lý còn nhớ tới thương hiệu → dễ click quảng cáo, dễ tương tác → hiệu quả remarketing cao hơn (Đây là nhóm có tỉ lệ chuyển đổi cao nhất nếu làm remarketing)
- Không xét Recency → dễ "đốt tiền" vào khách đã “rơi rụng”
  + F cao, R cao (mua thường xuyên nhưng lâu rồi) -> Có thể đã rời bỏ thương hiệu. Gửi khuyến mãi vào nhóm này dễ tốn ngân sách vô ích)
  + M cao, R cao	-> Khách từng chi nhiều, nhưng giờ không còn quan tâm. Tỷ lệ phản hồi thấp dù khuyến mãi hấp dẫn
- Recency giúp Marketing phân loại nhóm chiến lược - nền tảng cho Lifecycle Marketing
  + Active (Mới mua rất gần) -> Giữ nhịp tương tác → upsell
  + Warm (Mới mua nhưng chưa hẳn trung thành) -> Nuôi dưỡng → thúc đẩy mua lại
  + Cool (Tạm ngưng nhưng còn khả năng quay lại) -> Kích hoạt lại → retargeting nhẹ
  + Cold (Đã ngừng mua khá lâu) -> Hồi sinh → chiến dịch winback
  + Lost (Nguy cơ mất hẳn) -> Phân loại để giảm chi phí marketing hoặc loại trừ

  Như vậy, Recency giúp team Marketing gửi đúng người, đúng thời điểm, từ đó tăng tỷ lệ chuyển đổi, tối ưu ngân sách, và xây dựng kịch bản tự động hóa phù hợp với từng giai đoạn trong hành trình khách hàng.

#####**Team Sales**
→ Nên ưu tiên Frequency (F) vì:

(1) Mục tiêu cốt lõi của Team Sales:
- Tối đa hóa doanh số trên từng khách hàng và từng kỳ báo cáo (tuần/tháng/quý)
- Tăng tỷ lệ chốt đơn và upsell cho khách hiện có
- Xây dựng mối quan hệ dài hạn với khách hàng giá trị cao
- Ưu tiên nguồn lực (tư vấn viên, thời gian) vào nhóm tiềm năng nhất

(2) Vì sao Frequency là chỉ số quan trọng nhất với Sales?
- Frequency thể hiện mức độ gắn kết thực tế giữa khách và thương hiệu
  + Khách có F cao là khách quay lại mua nhiều lần, tức là đã trải qua nhiều lần "được phục vụ", thấy đáng tin, tiện lợi, đáp ứng nhu cầu.
  → Đây là "tài sản" của đội Sales vì khách đã quen thương hiệu → dễ tiếp cận, dễ trò chuyện, dễ đề xuất sản phẩm tiếp theo.
- F giúp Sales xác định nhóm khách “tiềm năng thật”
  → Không chỉ chi nhiều (M) mà mua đều đặn → ưu tiên nuôi dưỡng để tạo doanh thu bền vững.
- F càng cao → Chi phí bán hàng càng thấp → Lợi nhuận biên càng cao
  + Với khách đã từng mua nhiều lần, đội Sales không cần tốn công giới thiệu lại, không cần xử lý quá nhiều rào cản tâm lý → chốt đơn nhanh hơn, chi phí Sales thấp hơn.
  → Đây là nhóm “easy win” giúp đạt chỉ tiêu nhanh và bền
- F mở ra cơ hội cho chiến lược Up-sell / Cross-sell
  → Khách có thói quen mua lặp → dễ bán gói cao cấp, combo, dịch vụ bổ sung.
- F giúp chia nhóm & chăm sóc cá nhân hóa: Sales có thể chia khách theo tần suất mua (High-F: chăm kỹ → chốt hàng lớn; Medium-F: gợi ý tăng nhịp mua → combo; Low-F: đánh giá lại nguyên nhân → gỡ rào cản (giá, tiện lợi, tư vấn...))

Tóm lại, Frequency giúp Team Sales xác định đúng khách tiềm năng, tăng tỷ lệ chốt đơn, tối ưu chi phí và xây dựng doanh thu bền vững.
"""
